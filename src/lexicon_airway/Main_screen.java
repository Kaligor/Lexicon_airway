/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lexicon_airway;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

/**
 *
 * @author User
 */
public class Main_screen extends javax.swing.JFrame
{

    static final int FIRSTCLASS = 1;
    static final int ECONOMYCLASS = 2;

    static final int FIRSTCLASSPRICE = 20000;
    static final int ECONOMYCLASSPRICE = 5000;

    Logic logic = new Logic();
    int totalPris = 0;
    int classTotal = FIRSTCLASSPRICE;
    int foodTotal = 0;
    int drinkTotal = 0;
    DefaultListModel <Airplane>planeListArray = new DefaultListModel();

    DefaultListModel <Food>foodListArrayFirstClass = new DefaultListModel();
    DefaultListModel <Food>foodListArrayEcoClass = new DefaultListModel();

    DefaultListModel <Food>drinkListArrayFirstClass = new DefaultListModel();
    DefaultListModel <Food>drinkListArrayEcoClass = new DefaultListModel();

    /**
     * Creates new form Main_screen
     */
    public Main_screen()
    {
        initComponents();
        fill();
        planeList.setModel(planeListArray);
        drinkList.setModel(drinkListArrayEcoClass);
        foodList.setModel(foodListArrayEcoClass);
        foodList.setVisible(false);
        drinkList.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        planeScrollPane = new javax.swing.JScrollPane();
        planeList = new javax.swing.JList<>();
        searchButton = new javax.swing.JTextField();
        planeListLockButton = new javax.swing.JButton();
        Passanger_Admin_Toggle = new javax.swing.JToggleButton();
        clockLabel = new javax.swing.JLabel();
        PassangerPanel = new javax.swing.JPanel();
        ClassLabel = new javax.swing.JLabel();
        prisListLabel = new javax.swing.JLabel();
        flightOptionsLabel = new javax.swing.JLabel();
        classPrisLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        foodList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        drinkList = new javax.swing.JList<>();
        foodCheck = new javax.swing.JCheckBox();
        drinkCheck = new javax.swing.JCheckBox();
        classCheck = new javax.swing.JCheckBox();
        foodTotalLabel = new javax.swing.JLabel();
        prisTotalLabel = new javax.swing.JLabel();
        passangerLabel = new javax.swing.JLabel();
        yourNameInput = new javax.swing.JTextField();
        bookButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        planeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        planeList.setCellRenderer(new planeCellRenderer());
        planeScrollPane.setViewportView(planeList);

        planeListLockButton.setText("Lock");

        Passanger_Admin_Toggle.setText("Admin");

        clockLabel.setText("00:00");

        PassangerPanel.setBackground(new java.awt.Color(255, 255, 255));

        ClassLabel.setText("Class");

        prisListLabel.setText("Pris");

        flightOptionsLabel.setText("Selections");

        classPrisLabel.setText("5000");

        foodList.setCellRenderer(new foodCellRenderer());
        foodList.setEnabled(false);
        foodList.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                foodListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(foodList);

        drinkList.setCellRenderer(new foodCellRenderer());
        drinkList.setEnabled(false);
        drinkList.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                drinkListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(drinkList);

        foodCheck.setBackground(new java.awt.Color(255, 255, 255));
        foodCheck.setText("Food");
        foodCheck.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                foodCheckActionPerformed(evt);
            }
        });

        drinkCheck.setBackground(new java.awt.Color(255, 255, 255));
        drinkCheck.setText("Drink");
        drinkCheck.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                drinkCheckActionPerformed(evt);
            }
        });

        classCheck.setBackground(new java.awt.Color(255, 255, 255));
        classCheck.setText("First Class");
        classCheck.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                classCheckActionPerformed(evt);
            }
        });

        foodTotalLabel.setText("0");

        prisTotalLabel.setText("5000");

        passangerLabel.setText("Your Name");

        bookButton.setText("Book");
        bookButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bookButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PassangerPanelLayout = new javax.swing.GroupLayout(PassangerPanel);
        PassangerPanel.setLayout(PassangerPanelLayout);
        PassangerPanelLayout.setHorizontalGroup(
            PassangerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PassangerPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(PassangerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PassangerPanelLayout.createSequentialGroup()
                        .addGroup(PassangerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(flightOptionsLabel)
                            .addGroup(PassangerPanelLayout.createSequentialGroup()
                                .addGroup(PassangerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(foodCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PassangerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(drinkCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(PassangerPanelLayout.createSequentialGroup()
                                .addComponent(ClassLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(classCheck)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addGroup(PassangerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(prisTotalLabel)
                            .addGroup(PassangerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(prisListLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(classPrisLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                                .addComponent(foodTotalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(24, 24, 24))
                    .addGroup(PassangerPanelLayout.createSequentialGroup()
                        .addGroup(PassangerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passangerLabel)
                            .addComponent(yourNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PassangerPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        PassangerPanelLayout.setVerticalGroup(
            PassangerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PassangerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PassangerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prisListLabel)
                    .addComponent(flightOptionsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PassangerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClassLabel)
                    .addComponent(classPrisLabel)
                    .addComponent(classCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PassangerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(foodCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(drinkCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(PassangerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PassangerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(foodTotalLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passangerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(yourNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(prisTotalLabel)
                .addGap(18, 18, 18)
                .addComponent(bookButton)
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PassangerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(planeListLockButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(planeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(Passanger_Admin_Toggle)
                        .addGap(254, 254, 254)
                        .addComponent(clockLabel)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Passanger_Admin_Toggle)
                    .addComponent(clockLabel))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(planeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchButton)
                            .addComponent(planeListLockButton, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(PassangerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void drinkCheckActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_drinkCheckActionPerformed
    {//GEN-HEADEREND:event_drinkCheckActionPerformed
        if (drinkCheck.isSelected())
        {
            drinkList.setEnabled(true);
            drinkList.setVisible(true);
            drinkList.setSelectedIndex(0);
            drinkTotal = rankListReturner(true).get(drinkList.getSelectedIndex()).getPrice();
        } else
        {
            drinkList.setEnabled(false);
            drinkList.setVisible(false);
            drinkTotal = 0;
            drinkList.clearSelection();
        }
        calculateTotal();
    }//GEN-LAST:event_drinkCheckActionPerformed

    private void classCheckActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_classCheckActionPerformed
    {//GEN-HEADEREND:event_classCheckActionPerformed
        if (classCheck.isSelected())
        {
            classPrisLabel.setText("" + FIRSTCLASSPRICE);
            classTotal = FIRSTCLASSPRICE;
            foodList.setModel(foodListArrayFirstClass);
            drinkList.setModel(drinkListArrayFirstClass);
            foodList.clearSelection();
            drinkList.clearSelection();
        } else
        {
            classPrisLabel.setText("" + ECONOMYCLASSPRICE);
            classTotal = ECONOMYCLASSPRICE;
            foodList.setModel(foodListArrayEcoClass);
            drinkList.setModel(drinkListArrayEcoClass);
            foodList.clearSelection();
            drinkList.clearSelection();
        }
        calculateTotal();
    }//GEN-LAST:event_classCheckActionPerformed

    private void foodCheckActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_foodCheckActionPerformed
    {//GEN-HEADEREND:event_foodCheckActionPerformed
        if (foodCheck.isSelected())
        {
            foodList.setVisible(true);
            foodList.setEnabled(true);
            foodList.setSelectedIndex(0);
            foodTotal = rankListReturner(false).get(foodList.getSelectedIndex()).getPrice();
        } else
        {
            foodList.setVisible(false);
            foodList.setEnabled(false);
            foodTotal = 0;
            foodList.clearSelection();

        }
        calculateTotal();
    }//GEN-LAST:event_foodCheckActionPerformed

    private void foodListValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_foodListValueChanged
    {//GEN-HEADEREND:event_foodListValueChanged
        if (foodList.getSelectedIndex() >= 0)
        {
            int tempPrice = 0;
            for (int i = 0; i < foodList.getSelectedIndices().length; i++)
            {
                tempPrice = tempPrice + rankListReturner(false).get(foodList.getSelectedIndices()[i]).getPrice();

            }
            foodTotal = tempPrice;
            calculateTotal();
        }
    }//GEN-LAST:event_foodListValueChanged

    private void drinkListValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_drinkListValueChanged
    {//GEN-HEADEREND:event_drinkListValueChanged
        if (drinkList.getSelectedIndex() >= 0)
        {
            int tempPrice = 0;
            for (int i = 0; i < drinkList.getSelectedIndices().length; i++)
            {
                tempPrice = tempPrice + rankListReturner(true).get(drinkList.getSelectedIndices()[i]).getPrice();

            }
            drinkTotal = tempPrice;
            calculateTotal();
        }
    }//GEN-LAST:event_drinkListValueChanged

    private void bookButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bookButtonActionPerformed
    {//GEN-HEADEREND:event_bookButtonActionPerformed
        Passanger pass = logic.createPassanger(yourNameInput.getText());
        Airplane plane = planeListArray.getElementAt(planeList.getSelectedIndex());  
        ArrayList<Food> food = new ArrayList<>();
        food.addAll(drinkList.getSelectedValuesList());
        food.addAll(foodList.getSelectedValuesList());
        
        int rank = ECONOMYCLASS;
        if(classCheck.isSelected()) {
            rank = FIRSTCLASS;
        }
        
        logic.bookTicket(plane, pass, rank, food);
        planeList.clearSelection();
        
//        planeListArray.get(planeList.getSelectedIndex()).updateRankAvailable(rank);
        
    }//GEN-LAST:event_bookButtonActionPerformed

    class planeCellRenderer extends JLabel implements ListCellRenderer
    {

        private final Color HIGHLIGHT_COLOR = new Color(0, 0, 128);

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)
        {
            Airplane entry = (Airplane) value;
            setText(" " + entry.getCallsign() + " : " + entry.getAvEco() + " : " + entry.getAvFirst());
            setIcon(null);
            if (isSelected)
            {
//                setBackground(Color.GRAY);
                setForeground(HIGHLIGHT_COLOR);
            } else
            {
//                setBackground(list.getBackground());
                setForeground(Color.BLACK);
            }

            return this;
        }

    }

    class foodCellRenderer extends JLabel implements ListCellRenderer
    {

        private final Color HIGHLIGHT_COLOR = new Color(0, 0, 128);

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)
        {
            Food entry = (Food) value;
            setText(" " + entry.getName() + " Pris: " + entry.getPrice());
            setIcon(null);
            if (isSelected)
            {
//                setBackground(Color.GRAY);
                setForeground(HIGHLIGHT_COLOR);
            } else
            {
//                setBackground(Color.BLACK);
                setForeground(Color.BLACK);
            }

            return this;
        }

    }

    public DefaultListModel<Food> rankListReturner(boolean isDrink)
    {
        if (isDrink == false)
        {
            if (classCheck.isSelected())
            {
                return foodListArrayFirstClass;
            } else
            {
                return foodListArrayEcoClass;
            }
        } else if (classCheck.isSelected())
        {
            return drinkListArrayFirstClass;
        } else
        {
            return drinkListArrayEcoClass;
        }
    }

    public void calculateTotal()
    {
        totalPris = foodTotal + drinkTotal + classTotal;
        int temp = foodTotal + drinkTotal;
        foodTotalLabel.setText("" + temp);
        prisTotalLabel.setText("" + totalPris);
    }

    public final void fill()
    {
        logic.db.HangerDatabase.stream().forEach((item)
                -> 
                {
                    planeListArray.addElement(item);
        });

        logic.db.FoodMenu.stream().forEach((item)
                -> 
                {
                    if (item.getRank() == FIRSTCLASS)
                    {
                        if (item.getIsDrink())
                        {
                            drinkListArrayFirstClass.addElement(item);
                        } else
                        {
                            foodListArrayFirstClass.addElement(item);
                        }
                    } else if (item.getIsDrink())
                    {
                        drinkListArrayEcoClass.addElement(item);
                    } else
                    {
                        foodListArrayEcoClass.addElement(item);
                    }
        });

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Windows".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Main_screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Main_screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Main_screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Main_screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Main_screen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ClassLabel;
    private javax.swing.JPanel PassangerPanel;
    private javax.swing.JToggleButton Passanger_Admin_Toggle;
    private javax.swing.JButton bookButton;
    private javax.swing.JCheckBox classCheck;
    private javax.swing.JLabel classPrisLabel;
    private javax.swing.JLabel clockLabel;
    private javax.swing.JCheckBox drinkCheck;
    private javax.swing.JList<Food> drinkList;
    private javax.swing.JLabel flightOptionsLabel;
    private javax.swing.JCheckBox foodCheck;
    private javax.swing.JList<Food> foodList;
    private javax.swing.JLabel foodTotalLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel passangerLabel;
    private javax.swing.JList<Airplane> planeList;
    private javax.swing.JButton planeListLockButton;
    private javax.swing.JScrollPane planeScrollPane;
    private javax.swing.JLabel prisListLabel;
    private javax.swing.JLabel prisTotalLabel;
    private javax.swing.JTextField searchButton;
    private javax.swing.JTextField yourNameInput;
    // End of variables declaration//GEN-END:variables
}
